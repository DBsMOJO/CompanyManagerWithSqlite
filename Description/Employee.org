#+title: Company Manager with SQLite - Employee
#+author: Daniel Binder
#+language: de
#+date: <2025-01-28 Tue>

* Zweck der Klasse

Die Klasse =Employee= repräsentiert eine konkrete Mitarbeiterentität im System. Sie enthält alle relevanten Eigenschaften und Methoden, um die Daten eines Mitarbeiters zu speichern und zu verwalten. Zu den Eigenschaften gehören unter anderem =CompanyId=, =FirstName=, =LastName= und =Email=. Zudem bietet die Klasse eine Navigationseigenschaft, um die Beziehung zur zugehörigen Firma abzubilden.

* Verwendung

Die Klasse =Employee= wird in der gesamten Anwendung verwendet, um Mitarbeiterdaten in der Datenbank zu speichern, abzurufen und zu manipulieren. Sie implementiert den Contract [[file:IEmployee.org][IEmployee]], wodurch eine standardisierte Struktur für Mitarbeiterdaten gewährleistet wird. Über die Navigationseigenschaft =Company= kann auf die zugeordnete Firma zugegriffen werden. Diese Klasse wird sowohl in der Geschäftslogik als auch in der Datenzugriffsebene genutzt, um Mitarbeiter konsistent zu verwalten und in die Beziehungen innerhalb des Systems einzubetten.

* Diagramm

[[file:class-diagram/Employee.png]]

* Code

#+begin_src csharp :noweb yes :tangle ../CompanyManager.Logic/Entities/Employee.cs
using CompanyManager.Logic.Contracts;

namespace CompanyManager.Logic.Entities
{
    /// <summary>
    /// Represents an employee entity.
    /// </summary>
    public class Employee : EntityObject, IEmployee
    {
        #region properties
        /// <summary>
        /// Gets or sets the company ID.
        /// </summary>
        public int CompanyId { get; set; }

        /// <summary>
        /// Gets or sets the first name of the employee.
        /// </summary>
        public string FirstName { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the last name of the employee.
        /// </summary>
        public string LastName { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the email of the employee.
        /// </summary>
        public string Email { get; set; } = string.Empty;
        #endregion properties

        #region navigation properties
        /// <summary>
        /// Gets or sets the associated company.
        /// </summary>
        public Company? Company { get; set; }
        #endregion navigation properties

        #region methods
        /// <summary>
        /// Copies properties from another employee.
        /// </summary>
        /// <param name="employee">The employee to copy properties from.</param>
        public virtual void CopyProperties(IEmployee employee)
        {
            base.CopyProperties(employee);

            CompanyId = employee.CompanyId;
            FirstName = employee.FirstName;
            LastName = employee.LastName;
            Email = employee.Email;
        }

        /// <summary>
        /// Returns a string representation of the employee.
        /// </summary>
        /// <returns>A string representation of the employee.</returns>
        public override string ToString()
        {
            return $"{FirstName} {LastName}";
        }
        #endregion methods
    }
}
#+end_src
